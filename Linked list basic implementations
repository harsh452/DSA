we will see how to define a node class and basic methods of a linked list
*-> defining node class

class node{
public:
    int data;
    node* next;
    
    node(int val){
        data = val;
        next =NULL;
    }
    
};


*-> inserting at the end;

void insertatEnd(node* &head,int val){
    node* n = new node(val);
    if(head ==NULL){
        head = n;
        return;
    }
    
    node* temp  = head;
    while(temp->next != NULL){
        temp = temp->next;
    }
    temp->next = n;
    
    
}

*-> inserting at the head;

void insertatHead(node* &head,int val){
    node* n = new node(val);
    
    n->next = head;
    head=n;
}
*-> searchinfg in linked list

bool search(node* head,int key){
    while(head!= NULL){
        if(head->data==key){
            return true;
        }
        
        head = head->next;
    }
    return false;
}

*-> deleting from value
void delete1(node*& head, int val){
     if(head->data==val){
        node* toDelete = head;
        head = head->next;
        delete toDelete;
        return;
    }
    node* temp = head;
    while(temp->next->data != val){
        temp = temp->next;
    }
    node* toDelete = temp->next;
    temp->next = temp->next->next;
    delete toDelete;
}


*-> reverse a linked list

node* reverse(node* &head){
    if(head->next==NULL){
        return head;
    }
    
    node* currrent = head;
    node*  prev = NULL;
    while(currrent!=NULL){
        node* temp = currrent->next;
        currrent->next = prev;
        prev = currrent;
        currrent =temp;
    }
    
    return prev;// prev is the new head;
    
    
}

*-> reverse using recursion

node* reverse(node* &head){
   
   if(head==NULL ||head->next == NULL){
       return head;
   }
   node * newhead = reverse(head->next);
   head->next->next = head;
   head->next = NULL;
   
   return newhead;
    
    
}
