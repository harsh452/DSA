 vector<int> inorderTraversal(TreeNode* root) {     //// space complexity of this method is o(1)
        vector<int> value;
        TreeNode* cur = root;
        while(cur!=NULL){
          if(cur->left==NULL){
              value.push_back(cur->val);
              cur= cur->right;
          }else{
              TreeNode* temp = cur->left;
              while(temp->right!=NULL && temp->right!=cur){
                  temp = temp->right;
              }
              
              if(temp->right==NULL){
                  temp->right = cur;
                  cur = cur->left;
              }else{
                  temp->right = NULL;
                  value.push_back(cur->val);
                  cur = cur->right;
              }
          }
        }
        return value;

    }
    
     vector<int> preorderTraversal(TreeNode* root) {
        vector<int> value;
        TreeNode* cur = root;
        while(cur!=NULL){
          if(cur->left==NULL){
              value.push_back(cur->val);
              cur= cur->right;
          }else{
              TreeNode* temp = cur->left;
              while(temp->right!=NULL && temp->right!=cur){
                  temp = temp->right;
              }
              
              if(temp->right==NULL){
                  temp->right = cur;
                  value.push_back(cur->val);
                  cur = cur->left;
              }else{
                  temp->right = NULL;
                  cur = cur->right;
              }
          }
        }
        return value;

    }
